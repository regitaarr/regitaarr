name: 🎮 Rock Paper Scissors Game

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  play-game:
    if: |
      contains(github.event.issue.title, '🗿') || 
      contains(github.event.issue.title, '📄') || 
      contains(github.event.issue.title, '✂️') ||
      contains(github.event.issue.title, 'Rock') || 
      contains(github.event.issue.title, 'Paper') || 
      contains(github.event.issue.title, 'Scissors')
    runs-on: ubuntu-latest
    
    steps:
    - name: Debug Issue
      run: |
        echo "Issue Title: ${{ github.event.issue.title }}"
        echo "Issue Body: ${{ github.event.issue.body }}"
        echo "Repository: ${{ github.repository }}"
        
    - name: Play Rock Paper Scissors
      id: game
      run: |
        # Determine player choice from title
        TITLE="${{ github.event.issue.title }}"
        echo "Processing title: $TITLE"
        
        if [[ "$TITLE" == *"🗿"* ]] || [[ "$TITLE" == *"Rock"* ]] || [[ "$TITLE" == *"rock"* ]]; then
          PLAYER_CHOICE="rock"
          PLAYER_EMOJI="🗿"
          PLAYER_NAME="ROCK"
        elif [[ "$TITLE" == *"📄"* ]] || [[ "$TITLE" == *"Paper"* ]] || [[ "$TITLE" == *"paper"* ]]; then
          PLAYER_CHOICE="paper"
          PLAYER_EMOJI="📄"
          PLAYER_NAME="PAPER"
        elif [[ "$TITLE" == *"✂️"* ]] || [[ "$TITLE" == *"Scissors"* ]] || [[ "$TITLE" == *"scissors"* ]]; then
          PLAYER_CHOICE="scissors"
          PLAYER_EMOJI="✂️"
          PLAYER_NAME="SCISSORS"
        else
          echo "No valid choice found in title: $TITLE"
          exit 1
        fi
        
        echo "Player chose: $PLAYER_NAME"
        
        # Computer makes random choice
        CHOICES=("rock" "paper" "scissors")
        EMOJIS=("🗿" "📄" "✂️")
        NAMES=("ROCK" "PAPER" "SCISSORS")
        
        RANDOM_INDEX=$((RANDOM % 3))
        COMPUTER_CHOICE=${CHOICES[$RANDOM_INDEX]}
        COMPUTER_EMOJI=${EMOJIS[$RANDOM_INDEX]}
        COMPUTER_NAME=${NAMES[$RANDOM_INDEX]}
        
        echo "Computer chose: $COMPUTER_NAME"
        
        # Determine winner
        if [[ "$PLAYER_CHOICE" == "$COMPUTER_CHOICE" ]]; then
          RESULT="DRAW"
          RESULT_EMOJI="🤝"
          RESULT_MESSAGE="It's a tie! Great minds think alike!"
        elif [[ 
          ("$PLAYER_CHOICE" == "rock" && "$COMPUTER_CHOICE" == "scissors") ||
          ("$PLAYER_CHOICE" == "paper" && "$COMPUTER_CHOICE" == "rock") ||
          ("$PLAYER_CHOICE" == "scissors" && "$COMPUTER_CHOICE" == "paper")
        ]]; then
          RESULT="WIN"
          RESULT_EMOJI="🎉"
          RESULT_MESSAGE="🎉 **CONGRATULATIONS!** 🎉 You won this round!"
        else
          RESULT="LOSE"
          RESULT_EMOJI="💔"
          RESULT_MESSAGE="💔 **OOPS!** 💔 Computer wins this time. Try again!"
        fi
        
        echo "Result: $RESULT"
        
        # Save outputs
        echo "player_emoji=$PLAYER_EMOJI" >> $GITHUB_OUTPUT
        echo "player_name=$PLAYER_NAME" >> $GITHUB_OUTPUT
        echo "computer_emoji=$COMPUTER_EMOJI" >> $GITHUB_OUTPUT
        echo "computer_name=$COMPUTER_NAME" >> $GITHUB_OUTPUT
        echo "result_emoji=$RESULT_EMOJI" >> $GITHUB_OUTPUT
        echo "result_message=$RESULT_MESSAGE" >> $GITHUB_OUTPUT
        echo "result=$RESULT" >> $GITHUB_OUTPUT
        
    - name: Comment Game Result
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comment = `## 🎮 Game Result

          <div align="center">
          
          | 👤 Player | 🆚 | 🤖 Computer |
          |:---------:|:--:|:-----------:|
          | ${{ steps.game.outputs.player_emoji }} **${{ steps.game.outputs.player_name }}** | vs | ${{ steps.game.outputs.computer_emoji }} **${{ steps.game.outputs.computer_name }}** |
          
          ### ${{ steps.game.outputs.result_emoji }} ${{ steps.game.outputs.result_message }}
          
          </div>
          
          ---
          
          ## 📊 Round Details
          - **Your Choice:** ${{ steps.game.outputs.player_emoji }} ${{ steps.game.outputs.player_name }}
          - **Computer Choice:** ${{ steps.game.outputs.computer_emoji }} ${{ steps.game.outputs.computer_name }}
          - **Result:** ${{ steps.game.outputs.result_emoji }} **${{ steps.game.outputs.result }}**
          - **Game Time:** ${new Date().toISOString()}
          
          ---
          
          ## 🎯 Want to Play Again?
          
          Go back to [my profile](https://github.com/${{ github.repository_owner }}) and click another button!
          
          **Thanks for playing! 🎮**
          
          ---
          
          <div align="center">
          <em>This issue will be automatically closed in 10 seconds.</em>
          </div>`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });
          
    - name: Wait and Close Issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Wait 10 seconds
          await new Promise(resolve => setTimeout(resolve, 10000));
          
          // Close the issue
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            state: 'closed'
          });
